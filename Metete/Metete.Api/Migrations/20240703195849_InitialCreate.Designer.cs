// <auto-generated />
using System;
using Metete.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Metete.Api.Migrations
{
    [DbContext(typeof(MeteteContext))]
    [Migration("20240703195849_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Metete.Api.Models.AdminNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEstado")
                        .HasColumnType("int");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("admin_notificacion", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.CategoriaGenero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("categoria_genero", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.CentroDeporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aprobado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdComuna")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Point>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("point");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdComuna" }, "fk_centro_deporte_comuna_idx");

                    b.ToTable("centro_deporte", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Comuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdRegion")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Point>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("point");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdRegion" }, "fk_comuna_region_idx");

                    b.ToTable("comuna", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.CriterioMvp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("criterio_mvp", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.DetalleFuncionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdFuncionalidad")
                        .HasColumnType("int");

                    b.Property<string>("NombreFormulario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdFuncionalidad" }, "fk_detalle_funcionalidad_funcionalidad_idx");

                    b.ToTable("detalle_funcionalidad", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Creador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("DevolucionAbandono")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("DireccionCentroDeporte")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEvento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaModificacion")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdCategoriaGeneroPermitido")
                        .HasColumnType("int");

                    b.Property<int?>("IdCentroDeporte")
                        .HasColumnType("int");

                    b.Property<int>("IdCreador")
                        .HasColumnType("int");

                    b.Property<int>("IdMetodoPago")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDeporte")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoDivisa")
                        .HasColumnType("int");

                    b.Property<decimal?>("LatitudCentroDeporte")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("LongitudCentroDeporte")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Modificador")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NombreCentroDeporte")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumJugadores")
                        .HasColumnType("int");

                    b.Property<bool>("ObligatorioDisponerTelefono")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OtroCentroDeporte")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PrecioPorPersona")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("RecordarEventoJugador")
                        .HasColumnType("tinyint(1)");

                    b.Property<Point>("UbicacionCentroDeporte")
                        .HasColumnType("point");

                    b.Property<string>("ZonaHorariaEvento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCategoriaGeneroPermitido" }, "fk_evento_categoriagenero_idx");

                    b.HasIndex(new[] { "IdCentroDeporte" }, "fk_evento_centro_deporte_idx");

                    b.HasIndex(new[] { "IdMetodoPago" }, "fk_evento_metodo_pago_idx");

                    b.HasIndex(new[] { "IdTipoDeporte" }, "fk_evento_tipo_deporte_idx");

                    b.HasIndex(new[] { "IdTipoDivisa" }, "fk_evento_tipo_divisa_idx");

                    b.HasIndex(new[] { "IdCreador" }, "fk_evento_usuario_idx");

                    b.ToTable("evento", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Funcionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<bool>("EsDePago")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("funcionalidad", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.MetodoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("metodo_pago", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("nacionalidad", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime");

                    b.Property<int>("IdEstadoNotificacion")
                        .HasColumnType("int");

                    b.Property<int?>("IdEvento")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoNotificacion")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<bool>("Leido")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEvento" }, "fk_notificacion_evento_idx");

                    b.HasIndex(new[] { "IdTipoNotificacion" }, "fk_notificacion_tipo_notificacion_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_notificacion_usuario_idx");

                    b.ToTable("notificacion", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.TipoDeporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("RequierePosicion")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_deporte", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.TipoDivisa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_divisa", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.TipoGenero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_genero", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.TipoMembresia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_membresia", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.TipoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tipo_notificacion", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Administrador")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CodigoPais")
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FcmToken")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<string>("Foto")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdComuna")
                        .HasColumnType("int");

                    b.Property<int>("IdNacionalidad")
                        .HasColumnType("int");

                    b.Property<int>("IdPaisResidencia")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoGenero")
                        .HasColumnType("int");

                    b.Property<int>("IdTipoMembresia")
                        .HasColumnType("int");

                    b.Property<int?>("KmBusqueda")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasPrecision(9, 6)
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RecoveryCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("RecoveryCodeExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdComuna" }, "fk_usuario_comuna_idx");

                    b.HasIndex(new[] { "IdNacionalidad" }, "fk_usuario_nacionalidad_idx");

                    b.HasIndex(new[] { "IdPaisResidencia" }, "fk_usuario_pais_idx");

                    b.HasIndex(new[] { "IdTipoGenero" }, "fk_usuario_tipo_genero_idx");

                    b.HasIndex(new[] { "IdTipoMembresia" }, "fk_usuario_tipo_membresia_idx");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioComuna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdComuna")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdComuna" }, "fk_usuario_comuna_comuna_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_comuna_usuario_idx");

                    b.ToTable("usuario_comuna", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioEvaluacion", b =>
                {
                    b.Property<int>("IdUsuarioEvaluacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IdUsuarioEvaluacion"));

                    b.Property<int>("IdCriterioMvp")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluacion")
                        .HasColumnType("int");

                    b.Property<int>("IdEvaluador")
                        .HasColumnType("int");

                    b.Property<int>("IdEvento")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioEvaluacion")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCriterioMvp" }, "fk_usuario_evaluacion_criterio_Mvp_idx");

                    b.HasIndex(new[] { "IdEvento" }, "fk_usuario_evaluacion_evento_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_evaluacion_usuario_idx");

                    b.ToTable("usuario_evaluacion", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Aprobado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IdEvento")
                        .HasColumnType("int");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Posicion")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEvento" }, "fk_usuario_evento_evento_idx");

                    b.HasIndex(new[] { "IdRol" }, "fk_usuario_evento_rol_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_evento_usuario_idx");

                    b.ToTable("usuario_evento", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioHorario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiaDeLaSemana")
                        .HasColumnType("int");

                    b.Property<bool>("Disponible")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("HorarioInicio")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HorarioTermino")
                        .HasColumnType("time");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("ZonaHoraria")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_horario_usuario1_idx");

                    b.ToTable("usuario_horario", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioTipoDeporte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTipoDeporte")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdTipoDeporte" }, "fk_usuario_tipo_deporte_tipo_deporte_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_tipo_deporte_usuario_idx");

                    b.ToTable("usuario_tipo_deporte", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioTipoNotificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdTipoNotificacion")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdTipoNotificacion" }, "fk_usuario_tipo_notificacion_tipo_notificacion_idx");

                    b.HasIndex(new[] { "IdUsuario" }, "fk_usuario_tipo_notificacion_usuario_idx");

                    b.ToTable("usuario_tipo_notificacion", (string)null);
                });

            modelBuilder.Entity("Metete.Api.Models.CentroDeporte", b =>
                {
                    b.HasOne("Metete.Api.Models.Comuna", "Comuna")
                        .WithMany("CentroDeportes")
                        .HasForeignKey("IdComuna")
                        .IsRequired()
                        .HasConstraintName("fk_centro_deporte_comuna");

                    b.Navigation("Comuna");
                });

            modelBuilder.Entity("Metete.Api.Models.Comuna", b =>
                {
                    b.HasOne("Metete.Api.Models.Region", "Region")
                        .WithMany("Comunas")
                        .HasForeignKey("IdRegion")
                        .IsRequired()
                        .HasConstraintName("fk_comuna_region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Metete.Api.Models.DetalleFuncionalidad", b =>
                {
                    b.HasOne("Metete.Api.Models.Funcionalidad", "Funcionalidad")
                        .WithMany("DetalleFuncionalidades")
                        .HasForeignKey("IdFuncionalidad")
                        .IsRequired()
                        .HasConstraintName("fk_detalle_funcionalidad_funcionalidad");

                    b.Navigation("Funcionalidad");
                });

            modelBuilder.Entity("Metete.Api.Models.Evento", b =>
                {
                    b.HasOne("Metete.Api.Models.CategoriaGenero", "CategoriaGenero")
                        .WithMany("Eventos")
                        .HasForeignKey("IdCategoriaGeneroPermitido")
                        .IsRequired()
                        .HasConstraintName("fk_evento_categoriagenero");

                    b.HasOne("Metete.Api.Models.CentroDeporte", "CentroDeporte")
                        .WithMany("Eventos")
                        .HasForeignKey("IdCentroDeporte")
                        .HasConstraintName("fk_evento_centro_deporte");

                    b.HasOne("Metete.Api.Models.Usuario", "UsuarioCreador")
                        .WithMany("Eventos")
                        .HasForeignKey("IdCreador")
                        .IsRequired()
                        .HasConstraintName("fk_evento_usuario");

                    b.HasOne("Metete.Api.Models.MetodoPago", "MetodoPago")
                        .WithMany("Eventos")
                        .HasForeignKey("IdMetodoPago")
                        .IsRequired()
                        .HasConstraintName("fk_evento_metodo_pago");

                    b.HasOne("Metete.Api.Models.TipoDeporte", "TipoDeporte")
                        .WithMany("Eventos")
                        .HasForeignKey("IdTipoDeporte")
                        .IsRequired()
                        .HasConstraintName("fk_evento_tipo_deporte");

                    b.HasOne("Metete.Api.Models.TipoDivisa", "TipoDivisa")
                        .WithMany("Eventos")
                        .HasForeignKey("IdTipoDivisa")
                        .IsRequired()
                        .HasConstraintName("fk_evento_tipo_divisa");

                    b.Navigation("CategoriaGenero");

                    b.Navigation("CentroDeporte");

                    b.Navigation("MetodoPago");

                    b.Navigation("TipoDeporte");

                    b.Navigation("TipoDivisa");

                    b.Navigation("UsuarioCreador");
                });

            modelBuilder.Entity("Metete.Api.Models.Notificacion", b =>
                {
                    b.HasOne("Metete.Api.Models.Evento", "Evento")
                        .WithMany("Notificaciones")
                        .HasForeignKey("IdEvento")
                        .HasConstraintName("fk_notificacion_evento");

                    b.HasOne("Metete.Api.Models.TipoNotificacion", "TipoNotificacion")
                        .WithMany("Notificaciones")
                        .HasForeignKey("IdTipoNotificacion")
                        .IsRequired()
                        .HasConstraintName("fk_notificacion_tipo_notificacion");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_notificacion_usuario");

                    b.Navigation("Evento");

                    b.Navigation("TipoNotificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.Usuario", b =>
                {
                    b.HasOne("Metete.Api.Models.Comuna", "Comuna")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdComuna")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_comuna");

                    b.HasOne("Metete.Api.Models.Nacionalidad", "Nacionalidad")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdNacionalidad")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_nacionalidad");

                    b.HasOne("Metete.Api.Models.Pais", "PaisResidencia")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdPaisResidencia")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_pais");

                    b.HasOne("Metete.Api.Models.TipoGenero", "TipoGenero")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoGenero")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_genero");

                    b.HasOne("Metete.Api.Models.TipoMembresia", "TipoMembresia")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdTipoMembresia")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_membresia");

                    b.Navigation("Comuna");

                    b.Navigation("Nacionalidad");

                    b.Navigation("PaisResidencia");

                    b.Navigation("TipoGenero");

                    b.Navigation("TipoMembresia");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioComuna", b =>
                {
                    b.HasOne("Metete.Api.Models.Comuna", "Comuna")
                        .WithMany("UsuarioComunas")
                        .HasForeignKey("IdComuna")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_comuna_comuna");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioComunas")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_comuna_usuario");

                    b.Navigation("Comuna");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioEvaluacion", b =>
                {
                    b.HasOne("Metete.Api.Models.CriterioMvp", "CriterioMvp")
                        .WithMany("UsuarioEvaluaciones")
                        .HasForeignKey("IdCriterioMvp")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evaluacion_criterio_Mvp");

                    b.HasOne("Metete.Api.Models.Evento", "Evento")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("IdEvento")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evaluacion_evento");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioEvaluaciones")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evaluacion_usuario");

                    b.Navigation("CriterioMvp");

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioEvento", b =>
                {
                    b.HasOne("Metete.Api.Models.Evento", "Evento")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdEvento")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evento_evento");

                    b.HasOne("Metete.Api.Models.Rol", "Rol")
                        .WithMany("UsuarioEventos")
                        .HasForeignKey("IdRol")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evento_rol");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioEventos")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_evento_usuario");

                    b.Navigation("Evento");

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioHorario", b =>
                {
                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioHorarios")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_horario_usuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioTipoDeporte", b =>
                {
                    b.HasOne("Metete.Api.Models.TipoDeporte", "TipoDeporte")
                        .WithMany("UsuarioTipoDeportes")
                        .HasForeignKey("IdTipoDeporte")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_deporte_tipo_deporte");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioTipoDeportes")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_deporte_usuario");

                    b.Navigation("TipoDeporte");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.UsuarioTipoNotificacion", b =>
                {
                    b.HasOne("Metete.Api.Models.TipoNotificacion", "TipoNotificacion")
                        .WithMany("UsuarioTipoNotificaciones")
                        .HasForeignKey("IdTipoNotificacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_notificacion_tipo_notificacion");

                    b.HasOne("Metete.Api.Models.Usuario", "Usuario")
                        .WithMany("UsuarioTipoNotificaciones")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_tipo_notificacion_usuario");

                    b.Navigation("TipoNotificacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Metete.Api.Models.CategoriaGenero", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Metete.Api.Models.CentroDeporte", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Metete.Api.Models.Comuna", b =>
                {
                    b.Navigation("CentroDeportes");

                    b.Navigation("UsuarioComunas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.CriterioMvp", b =>
                {
                    b.Navigation("UsuarioEvaluaciones");
                });

            modelBuilder.Entity("Metete.Api.Models.Evento", b =>
                {
                    b.Navigation("Evaluaciones");

                    b.Navigation("Notificaciones");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.Funcionalidad", b =>
                {
                    b.Navigation("DetalleFuncionalidades");
                });

            modelBuilder.Entity("Metete.Api.Models.MetodoPago", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Metete.Api.Models.Nacionalidad", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.Pais", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.Region", b =>
                {
                    b.Navigation("Comunas");
                });

            modelBuilder.Entity("Metete.Api.Models.Rol", b =>
                {
                    b.Navigation("UsuarioEventos");
                });

            modelBuilder.Entity("Metete.Api.Models.TipoDeporte", b =>
                {
                    b.Navigation("Eventos");

                    b.Navigation("UsuarioTipoDeportes");
                });

            modelBuilder.Entity("Metete.Api.Models.TipoDivisa", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("Metete.Api.Models.TipoGenero", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.TipoMembresia", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Metete.Api.Models.TipoNotificacion", b =>
                {
                    b.Navigation("Notificaciones");

                    b.Navigation("UsuarioTipoNotificaciones");
                });

            modelBuilder.Entity("Metete.Api.Models.Usuario", b =>
                {
                    b.Navigation("Eventos");

                    b.Navigation("Notificaciones");

                    b.Navigation("UsuarioComunas");

                    b.Navigation("UsuarioEvaluaciones");

                    b.Navigation("UsuarioEventos");

                    b.Navigation("UsuarioHorarios");

                    b.Navigation("UsuarioTipoDeportes");

                    b.Navigation("UsuarioTipoNotificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
